// We support comments!

/* Block comments are cool
 * and /* can be /* nested */
 * deeply! */
*/

use some_module::*;

pub class IMyInterface {
	pub in type TypeAlias: IMyOtherInterface<Parent = Self>;
}

pub class IMyOtherInterface {
	pub in type Parent;

	pub in fn produce() -> Self::Parent;
}

fn test<A: IMyInterface>(a: u32, b: u32, c: A::TypeAlias) -> A {
	val my_var = Box::new((a + b) as f32 + 0000234__245.2_2__5783);
	print($"The result of {a} + {b} is {{
		fn test() {
			my_var += 1.;
		}
		a + b
	}}");

	match my_var {
		0..5 => do_something(),
		_ => do_something_else(some_named_arg: true),
	}

	val _ünicodé_suppõrt = $"Héllo! {áll}";
	val multiline = "m\
	\0\t\
			no indent
	has indent";

	c.produce()
}
