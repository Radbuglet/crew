pub class MyClass {
    var field_1: Type;

    @WithAttribute
    @WithAttribute(and arguments)
    val field_2: Type;

    val type_with_generics: (Type<B, C, D = E<F, G>, A = B<C = D, E = (F, G)>>, OtherType<()>);

    pub
    pub(some::path::here)
    pub(yes::we::support::{trees, *})
    val field_3: Whee;

    static val field_4: Whee;

    pub static @Foo pub(foo::bar) @Bar val baz: Maz;

    static in static pub pub static in(foo::bar::{path, here}) @Test out(dynamic, _, My<Type = Here>) val foo: Foo;

    pub {
        val this: Is<A = (Block)>;
    }

    {
        {
            val this_is_nested: and::unqualified<()>;
        }

        pub(path::here) val huzzah: other::path::here;
    }
}

pub class MyOtherClass {
    pub static {
        val all_my_statics: ::Here<self::paths::work::here::too>;
    }

    impl(path.to.input._) {
        on foo as bar;
    }
}
