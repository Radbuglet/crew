pub class MyClass {
    @SomeAttribute
    pub val foo: u32;

    @SomeOtherAttribute
    pub val bar: SomeType<WithGenerics, That=Are::Associated, Whee=Woo>;

    pub val bar_with_impl: SomeType impl {
        val this_is_the_same_thing_again: u32;
    };

    /// Some qualifiers
    @AndAttributes
    pub(path::here)
    in(other::{path::here, and::here})
    out(CustomType<MoreGenerics>, Ahh<Why>, dynamic, _)
    static
    where Generics: Here
    impl(path.to.thing._, and.other.thing)
    {
        val baz: i32;
        var maz: u32;
    }

    //> Regions!

    val prop: fn(OhGod<These=Exist<fn(foo: u32) -> (u8, fn(no: Foo<(Foo,), (Bar)>))>>) -> u8 => ...;
    pub var prop_2: Type {
        pub get => ...;
        set {
            ...
        }
    }

    fn just_an_fn<Param1: OtherThing<fn(not_these: Again), Assoc = Thing> + fn() -> (), Param2>() -> fn(a: u8) -> fn(b: u8) -> (u8, fn(),)
    where
        Param1 = ExactThing,
        Param2: BaseThing,
    {
        ...
    }
}
